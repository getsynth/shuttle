version: 2.1

orbs:
  docker-buildx: sensu/docker-buildx@1.1.1
  aws-ecr: circleci/aws-ecr@8.1.2
  win: circleci/windows@5.0

executors:
  docker-rust:
    docker:
      - image: cimg/rust:1.68.0
    resource_class: small
  image-ubuntu:
    machine:
      image: ubuntu-2204:2022.04.1
      docker_layer_caching: true
    resource_class: xlarge

# sscache steps are from this guide
# https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115
commands:
  restore-cargo-cache:
    steps:
      # Restore cargo cache before installing anything with the cargo command (ie cargo install ...)
      - restore_cache:
          name: Restore cargo cache
          keys:
            - cargo-{{ checksum "Cargo.lock" }}
      - run:
          name: Install sccache
          command: |
            export SCCACHE_VERSION='v0.4.2'
            ls ~/.cargo/bin/sccache || curl -L https://github.com/mozilla/sccache/releases/download/$SCCACHE_VERSION/sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz | tar -xOz sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl/sccache > ~/.cargo/bin/sccache && chmod +x ~/.cargo/bin/sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            sccache --version
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-{{ .Environment.CIRCLE_JOB }}
  save-cargo-cache:
    steps:
      - run:
          name: Sccache stats
          command: sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
      - save_cache:
          name: Save cargo cache
          key: cargo-{{ checksum "Cargo.lock" }}-{{ epoch }}
          paths:
            - ~/.cargo
  restore-buildx-cache:
    steps:
      - docker-buildx/install:
          version: 0.8.2
          qemu-user-static-version: 7.0.0-7
      - restore_cache:
          name: Restore buildx cache
          keys:
            # Try lock cache first
            - docker-buildx-{{ checksum "./Cargo.lock" }}
            # Try branch cache next
            - docker-buildx-{{ .Branch }}
            # Fallback to main cache
            - docker-buildx-main
      - run:
          name: Configure buildx cache
          command: export BUILDX_CACHE=/tmp/cache/buildx
  save-buildx-cache:
    steps:
      - save_cache:
          name: Save buildx cache
          paths:
            - "/tmp/cache/buildx"
          key: docker-buildx-{{ checksum "./Cargo.lock" }}-{{ epoch }}
          when: always
  apply-patches:
    steps:
      - run:
          name: Patch service
          command: |
            cat\<< EOF > ~/.cargo/config.toml
            [patch.crates-io]
            shuttle-service = { path = "$PWD/service" }
            shuttle-runtime = { path = "$PWD/runtime" }

            shuttle-aws-rds = { path = "$PWD/resources/aws-rds" }
            shuttle-persist = { path = "$PWD/resources/persist" }
            shuttle-shared-db = { path = "$PWD/resources/shared-db" }
            shuttle-secrets = { path = "$PWD/resources/secrets" }
            shuttle-static-folder = { path = "$PWD/resources/static-folder" }

            shuttle-axum = { path = "$PWD/services/shuttle-axum" }
            shuttle-actix-web = { path = "$PWD/services/shuttle-actix-web" }
            shuttle-next = { path = "$PWD/services/shuttle-next" }
            shuttle-poem = { path = "$PWD/services/shuttle-poem" }
            shuttle-poise = { path = "$PWD/services/shuttle-poise" }
            shuttle-rocket = { path = "$PWD/services/shuttle-rocket" }
            shuttle-salvo = { path = "$PWD/services/shuttle-salvo" }
            shuttle-serenity = { path = "$PWD/services/shuttle-serenity" }
            shuttle-thruster = { path = "$PWD/services/shuttle-thruster" }
            shuttle-tide = { path = "$PWD/services/shuttle-tide" }
            shuttle-tower = { path = "$PWD/services/shuttle-tower" }
            shuttle-warp = { path = "$PWD/services/shuttle-warp" }
            EOF
  install-rust:
    steps:
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target add wasm32-wasi
            sudo apt update && sudo apt install -y libssl1.1
  install-protoc:
    parameters:
      arch:
        description: "The architecture of protoc to install"
        type: string
        default: "linux-x86_64"
    steps:
      - run:
          name: Install protoc
          command: |
            curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protoc-21.9-<< parameters.arch >>.zip &&\
              sudo unzip -o protoc-21.9-<< parameters.arch >>.zip -d /usr/local bin/protoc &&\
              sudo unzip -o protoc-21.9-<< parameters.arch >>.zip -d /usr/local 'include/*' &&\
              rm -f protoc-21.9-<< parameters.arch >>.zip
  make-artifact:
    parameters:
      target:
        description: "Rust target to put in artifact"
        type: string
      suffix:
        description: "Suffix that is on the binary"
        type: string
        default: ""
    steps:
      - run:
          name: Set git tag in the environment
          command: |
            echo TAG=$(git describe --tags --abbrev=0) >> $BASH_ENV
      - run:
          name: Set binary directory in the environment
          command: |
            echo BIN_DIR=cargo-shuttle-<< parameters.target >>-$TAG >> $BASH_ENV
      - run:
          name: Make artifact
          command: |
            mkdir $BIN_DIR
            mv target/<< parameters.target >>/release/cargo-shuttle<< parameters.suffix >> $BIN_DIR/cargo-shuttle<< parameters.suffix >>
            mv LICENSE $BIN_DIR/
            mv README.md $BIN_DIR/
            mkdir -p artifacts/<< parameters.target >>
            cp $BASH_ENV artifacts/<< parameters.target >>.env
            tar -cvzf artifacts/<< parameters.target >>/cargo-shuttle-$TAG-<< parameters.target >>.tar.gz $BIN_DIR
      # Persist the bash environment to the workspace as well, we need it for the release job.
      # Make sure the name is unique, since the binaries will be built in parallel.
      # https://discuss.circleci.com/t/share-environment-variable-between-different-job/45647/4
      - persist_to_workspace:
          root: artifacts
          paths:
            - << parameters.target >>/*
            - << parameters.target >>.env

jobs:
  workspace:
    executor: docker-rust
    resource_class: xlarge
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - checkout
      - restore-cargo-cache
      - install-protoc
      # Check this to make sure we do not include patched dependencies in
      # the Cargo.lock.
      - run:
          command: |
            [[ -z $(cat Cargo.lock | grep "\[\[patch.unused\]\]") ]]
      - run: cargo fmt --all --check
      # TODO: this is incompatible with workspace inheritance, uncomment when
      # https://github.com/DevinR528/cargo-sort/pull/29 is merged
      # - run: cargo install cargo-sort
      # - run: cargo sort --check --workspace
      - run: |
          cargo clippy --tests \
                       --all-targets \
                       --all-features \
                       --no-deps -- \
                       --D warnings \
                       -A clippy::let-unit-value \
                       -A clippy::format-push-string
      - save-cargo-cache
  check-standalone:
    parameters:
      path:
        description: "Path to crate external from workspace"
        type: string
      features:
        description: "Features to enable"
        type: string
        default: --all-features
    executor: docker-rust
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - checkout
      - restore-cargo-cache
      - install-protoc
      - apply-patches
      - run: cargo fmt --all --check --manifest-path << parameters.path >>/Cargo.toml
      # TODO: this is incompatible with workspace inheritance, uncomment when
      # https://github.com/DevinR528/cargo-sort/pull/29 is merged
      # - run: cargo install cargo-sort
      # - run: cargo sort --check << parameters.path >>
      - run: |
          cargo clippy --tests \
                       --all-targets \
                       << parameters.features >> \
                       --manifest-path << parameters.path >>/Cargo.toml \
                       --no-deps -- \
                       --D warnings \
                       -A clippy::let-unit-value \
                       -A clippy::format-push-string
      - run: cargo test << parameters.features >> --manifest-path << parameters.path >>/Cargo.toml -- --nocapture
      - save-cargo-cache
  platform-test:
    parameters:
      crate:
        description: "Crate to test"
        type: string
    # Using an image since tests will start a docker container
    executor: image-ubuntu
    steps:
      - install-rust
      - install-protoc
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore-cargo-cache
      - apply-patches
      - run:
          name: Run unit tests
          command: cargo test --package << parameters.crate >> --all-features --lib -- --nocapture
      - run:
          name: Run integration tests
          # Only run integration tests if there are any
          command: |
            set +o pipefail
            (cargo test --package << parameters.crate >> --all-features --test '*' -- --list 2>&1 | grep -q "no test target matches pattern") && echo "nothing to test" || cargo test --package << parameters.crate >> --all-features --test '*' -- --nocapture
      - save-cargo-cache
  e2e-test:
    executor: image-ubuntu
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - install-rust
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore-buildx-cache
      - run:
          name: Make images for tests
          command: |
            sudo mkdir -p $BUILDX_CACHE && sudo chown -R circleci:circleci $BUILDX_CACHE
            make images
      - save-buildx-cache
      - apply-patches
      - run:
          name: Run the E2E tests
          command: |
            # clean up a potential existing deployments before running
            # the tests just in case the environment is not clean
            make down
            BUILDX_CACHE=/tmp/cache/buildx make up

            SHUTTLE_TESTS_NETWORK=shuttle-dev_user-net SHUTTLE_TESTS_RUNTIME_IMAGE=public.ecr.aws/shuttle-dev/deployer:latest cargo test --package shuttle-gateway --all-features --lib -- --nocapture

            BUILDX_CACHE=/tmp/cache/buildx make test
      - save_cache:
          paths:
            - "/tmp/cache/buildx"
          key: docker-buildx-{{ .Branch }}
          when: always
  build-and-push:
    executor: image-ubuntu
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - checkout
      - run: 
          name: Set git tag in bash_env
          command: |
            echo TAG=$(git describe --tags --abbrev=0) >> $BASH_ENV
      - restore-buildx-cache
      - aws-ecr/ecr-login:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          public-registry: true
      - run:
          name: Make and push images
          command: |
            PUSH=true PROD=false PLATFORMS=linux/amd64 TAG=$TAG make images
      - save-buildx-cache
  deploy-images:
    executor: image-ubuntu
    steps:
    - checkout
    - run: 
        name: Set git tag in bash_env
        command: |
          echo TAG=$(git describe --tags --abbrev=0) >> $BASH_ENV
    - add_ssh_keys:
        fingerprints:
          - "6f:b3:35:dc:2d:f4:3c:e4:d1:4a:7c:a5:70:e3:b3:78"
    - run:
        name: Generate ssh config
        command: ./.circleci/unstable-ssh-config.sh
    - run:
        name: Deploy to unstable
        command: |
          DOCKER_HOST=ssh://ec2-user@master.shuttle.internal USE_TLS=enable PROD=false DD_API_KEY=$DD_API_KEY \
          POSTGRES_PASSWORD=$DEV_POSTGRES_PASSWORD \
          MONGO_INITDB_ROOT_PASSWORD=$DEV_MONGO_INITDB_ROOT_PASSWORD \
          TAG=$TAG \
          make deploy
    - run:
        name: Pull new deployer image
        command: |
          ssh ec2-user@controller.shuttle.internal "docker pull public.ecr.aws/shuttle-dev/deployer:$TAG"
  build-binaries-linux:
    machine:
      image: << parameters.image >>
    resource_class: << parameters.resource_class >>
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    parameters:
      target:
        description: "Linux target to build for"
        type: string
      image:
        description: "Machine image to use"
        type: string
      resource_class:
        description: "The resource type to use for the machine"
        type: string
      protoc_arch:
        description: "Architecture to use to install protoc"
        type: string
    steps:
      - checkout
      - run: sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt install -y libssl-dev musl-tools clang
      - install-protoc:
          arch: << parameters.protoc_arch >>
      - run:
          name: Install Rust
          command: curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain 1.68.0 --target << parameters.target >>
      - run:
          name: Build
          command: |
            # From https://github.com/briansmith/ring/issues/1414#issuecomment-1055177218
            export CC_aarch64_unknown_linux_musl=clang
            # "vendored-openssl" is from https://github.com/cross-rs/cross/issues/229#issuecomment-597898074
            cargo build --release --package cargo-shuttle --features vendored-openssl --target << parameters.target >>
      - make-artifact:
          target: << parameters.target >>
  build-binaries-windows:
    executor:
      name: win/server-2022
      size: xlarge
      shell: bash.exe
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - checkout
      - run: choco install -y strawberryperl protoc
      - run:
          name: Install Rust
          command: |
            wget -OutFile "C:\rustup-init.exe" https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
            C:\rustup-init.exe -y --default-toolchain 1.68.0 --target x86_64-pc-windows-msvc
          shell: powershell.exe
      - run:
          name: Build
          command: |
            # From https://github.com/alexcrichton/openssl-src-rs/issues/45
            # Because of https://github.com/openssl/openssl/issues/9048
            $env:OPENSSL_SRC_PERL="C:\Strawberry\perl\bin\perl.exe"
            # "vendored-openssl" is from https://github.com/cross-rs/cross/issues/229#issuecomment-597898074
            ..\.cargo\bin\cargo.exe build --release --package cargo-shuttle --features vendored-openssl --target x86_64-pc-windows-msvc
          shell: powershell.exe
      - make-artifact:
          target: x86_64-pc-windows-msvc
          suffix: ".exe"
  build-binaries-mac:
    macos:
      xcode: 12.5.1
    resource_class: medium
    environment:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: "sparse"
    steps:
      - checkout
      - install-protoc:
          arch: osx-x86_64
      - run:
          name: Install Rust
          command: curl --proto '=https' https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain 1.68.0 --target x86_64-apple-darwin
      - run:
          name: Build
          command: |
            # "vendored-openssl" is from https://github.com/cross-rs/cross/issues/229#issuecomment-597898074
            cargo build --release --package cargo-shuttle --features vendored-openssl --target x86_64-apple-darwin
      - make-artifact:
          target: x86_64-apple-darwin
  publish-github-release:
    docker:
      - image: cimg/go:1.19.3
    steps:
      - attach_workspace:
          at: artifacts
      - run:
          name: "Set tag in environment"
          command: |
            for file in artifacts/*.env; do
              cat artifacts/${file##*/} >> "$BASH_ENV";
              rm artifacts/${file##*/};
            done
      - run:
          name: "Publish Release on GitHub"
          # Since each binary is in a sub directory named after its target, we flatten
          # the artifacts directory before passing it to ghr
          command: |
            find artifacts -mindepth 2 -type f -exec mv -t artifacts {} +
            go install github.com/tcnksm/ghr@v0.16.0
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete -draft ${TAG} ./artifacts/
  linux-qa:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Install Rust"
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: "Install Shuttle"
          command:  cargo install cargo-shuttle --path ./cargo-shuttle
      - run: cargo shuttle --version
      - run:
          name: Login
          command: |
            cargo shuttle login --api-key ${SHUTTLE_API_KEY}
      - run:
          name: QA
          command: ./.circleci/qa.sh linux
          environment:
            SHUTTLE_API: https://api.unstable.shuttle.rs
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Test WASM
          command: ./.circleci/qa-wasm.sh
      # - run:
      #     name: Test Docker
      #     command: ./.circleci/qa-docker.sh
  mac-qa:
    macos:
      xcode: 12.5.1
    resource_class: medium
    steps:
      - checkout
      - run:
          name: "Install Protobuf"
          command: |
            brew install protobuf
      - run:
          name: "Install Rust"
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: "Install Shuttle"
          command:  cargo install cargo-shuttle --path ./cargo-shuttle
      - run: cargo shuttle --version
      - run:
          name: Login
          command: |
            cargo shuttle login --api-key ${SHUTTLE_API_KEY}
      - run:
          name: QA
          command: ./.circleci/qa.sh mac
          environment:
            SHUTTLE_API: https://api.unstable.shuttle.rs
      - run: git submodule sync
      - run: git submodule update --init
      - run:
          name: Test WASM
          command: ./.circleci/qa-wasm.sh
      # We can't run Docker inside the MacOs executor at this time
      # https://support.circleci.com/hc/en-us/articles/360045029591-Can-I-use-Docker-within-the-macOS-executor-
      # - run:
      #     name: "Install Docker"
      #     command: |
      #       brew install --cask docker
      # - run:
      #     name: Test Docker
      #     command: ./.circleci/qa-docker.sh
  windows-qa:
    executor:
      name: win/server-2022
      size: medium
      shell: powershell.exe
    environment:
      CARGO_NET_GIT_FETCH_WITH_CLI: "true"
    steps:
      - checkout
      - run:
          name: "Install Protobuf"
          command: |
            choco install -y protoc
      - run:
          name: Install Rust
          command: |
            wget -OutFile "C:\rustup-init.exe" https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe
            C:\rustup-init.exe -y --default-toolchain 1.68.0 --target x86_64-pc-windows-msvc
      - run:
          name: "Install Shuttle"
          command:  ..\.cargo\bin\cargo.exe install cargo-shuttle --path ./cargo-shuttle
      - run: ..\.cargo\bin\cargo.exe shuttle --version
      - run:
          name: Login
          command: |
            ..\.cargo\bin\cargo.exe shuttle login --api-key $env:SHUTTLE_API_KEY
      - run:
          name: QA
          command: ./.circleci/qa.ps1
          environment:
            SHUTTLE_API: https://api.unstable.shuttle.rs
      - run: git submodule sync
      - run: git submodule update --init
      # - run:
      #     name: Test WASM
      #     command: ./.circleci/qa-wasm.ps1
      # We can't run linux containers on the Windows executor at this time
      # https://circleci.com/docs/using-windows/#known-issues-and-limitations
      # - run:
      #     name: Test Docker
      #     command: ./.circleci/qa-docker.ps1

workflows:
  ci:
    jobs:
      - workspace
      - check-standalone:
          name: << matrix.path >>
          matrix:
            parameters:
              path:
                - resources/aws-rds
                - resources/persist
                - resources/secrets
                - resources/static-folder
                - services/shuttle-actix-web
                - services/shuttle-axum
                - services/shuttle-next
                - services/shuttle-poem
                - services/shuttle-poise
                - services/shuttle-rocket
                - services/shuttle-salvo
                - services/shuttle-serenity
                - services/shuttle-thruster
                - services/shuttle-tide
                - services/shuttle-tower
                - services/shuttle-warp
      - check-standalone:
        # shuttle-shared-db has mutually exclusive features
        # so we run checks for each feature separately
          name: "resources/shared-db: << matrix.features >>"
          matrix:
            alias: check-standalone-shared-db
            parameters:
              path: [resources/shared-db]
              features:
                - "-F mongodb"
                - "-F postgres"
                - "-F postgres-rustls"
      - platform-test:
          name: << matrix.crate >>
          requires:
            - workspace
          matrix:
            parameters:
              crate:
                [
                  "shuttle-auth",
                  "cargo-shuttle",
                  "shuttle-codegen",
                  "shuttle-common",
                  "shuttle-deployer",
                  "shuttle-proto",
                  "shuttle-provisioner",
                  "shuttle-runtime",
                  "shuttle-service",
                ]
      - e2e-test:
          requires:
            - platform-test
            - check-standalone
            - check-standalone-shared-db
          filters:
            branches:
              only: production
      - approve-push-unstable:
          type: approval
          filters:
            branches:
              only: main
      - build-and-push:
          requires:
            - approve-push-unstable
          filters:
            branches:
              only: main
      - deploy-images:
          requires:
            - build-and-push
  release:
    jobs:
      - linux-qa:
          filters:
            branches:
              only: production
      - mac-qa:
          filters:
            branches:
              only: production
      - windows-qa:
          filters:
            branches:
              only: production
      - build-binaries-linux:
          name: build-binaries-x86_64-gnu
          image: ubuntu-2204:2022.04.1
          target: x86_64-unknown-linux-gnu
          protoc_arch: linux-x86_64
          resource_class: xlarge
          filters:
            branches:
              only: production
      - build-binaries-linux:
          name: build-binaries-x86_64-musl
          image: ubuntu-2204:2022.04.1
          target: x86_64-unknown-linux-musl
          protoc_arch: linux-x86_64
          resource_class: xlarge
          filters:
            branches:
              only: production
      - build-binaries-linux:
          name: build-binaries-aarch64
          image: ubuntu-2004:202101-01
          target: aarch64-unknown-linux-musl
          resource_class: arm.xlarge
          protoc_arch: linux-aarch_64
          filters:
            branches:
              only: production
      - build-binaries-windows:
          filters:
            branches:
              only: production
      - build-binaries-mac:
          filters:
            branches:
              only: production
      - publish-github-release:
          requires:
            - build-binaries-x86_64-gnu
            - build-binaries-x86_64-musl
            - build-binaries-aarch64
            - build-binaries-windows
            - build-binaries-mac
          filters:
            branches:
              only: production
