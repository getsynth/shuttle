version: 2.1

orbs: 
  docker-buildx: sensu/docker-buildx@1.1.1
  aws-ecr: circleci/aws-ecr@8.1.2

# sscache steps are from this guide
# https://medium.com/@edouard.oger/rust-caching-on-circleci-using-sccache-c996344f0115
commands:
  restore-cache:
    steps:
      # Restore cargo cache before installing anything with the cargo command (ie cargo install ...)
      - restore_cache:
          name: Restore cargo cache
          keys:
            - cargo-{{ checksum "Cargo.lock" }}-a
      - run:
          name: Install sccache
          command: |
            ls ~/.cargo/bin/sccache || cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            sccache --version
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-{{ .Environment.CIRCLE_JOB }}
  save-cache:
    steps:
      - run:
          name: Sccache stats
          command: sccache --show-stats
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
      - save_cache:
          name: Save cargo cache
          key: cargo-{{ checksum "Cargo.lock" }}-a-{{ epoch }}
          paths:
            - ~/.cargo

jobs:
  fmt-workspace:
    docker:
      - image: cimg/rust:1.62.0
    steps:
      - checkout
      - restore-cache
      - run: cargo fmt --all --check
      - run: cargo install cargo-sort
      - run: cargo sort --check --workspace
      - run: cargo check --workspace --all-targets
      - save-cache
  clippy-workspace:
    parameters:
      framework:
        description: "Framework to activate"
        type: string
    docker:
      - image: cimg/rust:1.62.0
    steps:
      - checkout
      - restore-cache
      - run: |
          cargo clippy --tests \
                       --all-targets \
                       --features="codegen,loader,sqlx-integration,sqlx-postgres,secrets,<< parameters.framework >>" \
                       --no-deps -- \
                       --D warnings \
                       -A clippy::let-unit-value \
                       -A clippy::format-push-string
      - save-cache
  check-standalone:
    parameters:
      path:
        description: "Path to crate excluded from workspace"
        type: string
    docker:
      - image: cimg/rust:1.62.0
    steps:
      - checkout
      - restore-cache
      - run:
          name: Patch service
          command: |
            cat\<< EOF > ~/.cargo/config.toml
            [patch.crates-io]
            shuttle-service = { path = "$PWD/service" }
            EOF
      - run: cargo fmt --all --check --manifest-path << parameters.path >>/Cargo.toml
      - run: cargo install cargo-sort
      - run: cargo sort --check << parameters.path >>
      - run: |
          cargo clippy --tests \
                       --all-targets \
                       --manifest-path << parameters.path >>/Cargo.toml \
                       --no-deps -- \
                       --D warnings \
                       -A clippy::let-unit-value \
                       -A clippy::format-push-string
      - save-cache

  build-test-and-push:
    resource_class: xlarge
    machine:
      image: ubuntu-2204:2022.04.1
      docker_layer_caching: true
    steps:
      - checkout
      - docker-buildx/install:
          version: 0.8.2
          qemu-user-static-version: 7.0.0-7
      - restore_cache:
          keys:
            # Try lock cache first
            - docker-buildx-{{ checksum "./Cargo.lock" }}
            # Try branch cache next
            - docker-buildx-{{ .Branch }}
            # Fallback to main cache
            - docker-buildx-main
      - run:
          command: |
            export BUILDX_CACHE=/tmp/cache/buildx
            sudo mkdir -p $BUILDX_CACHE && sudo chown -R circleci:circleci $BUILDX_CACHE
            make images
      - save_cache:
          paths:
            - "/tmp/cache/buildx"
          key: docker-buildx-{{ checksum "./Cargo.lock" }}
          when: always
      - run:
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Run the E2E tests
          command: |
            mkdir -p ~/.cargo
            cat\<< EOF > ~/.cargo/config.toml
            [patch.crates-io]
            shuttle-service = { path = "$PWD/service" }
            EOF

            make down
            docker volume create shuttle-backend-vol
            cd e2e; BUILDX_CACHE=/tmp/cache/buildx SHUTTLE_API_KEY=test-key cargo test -- --nocapture
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - aws-ecr/ecr-login:
                aws-access-key-id: AWS_ACCESS_KEY_ID
                aws-secret-access-key: AWS_SECRET_ACCESS_KEY
                public-registry: true
            - run:
               command: |
                 make clean
                 PUSH=true BUILDX_CACHE=/tmp/cache/buildx PLATFORMS=linux/amd64,linux/arm64 make images
      - save_cache:
          paths:
            - "/tmp/cache/buildx"
          key: docker-buildx-{{ checksum "./Cargo.lock" }}
          when: always
      - save_cache:
          paths:
            - "/tmp/cache/buildx"
          key: docker-buildx-{{ .Branch }}
          when: always
workflows:
  version: 2
  fmt:
    jobs:
      - fmt-workspace
      - clippy-workspace:
          requires:
            - fmt-workspace
          matrix:
            parameters:
              framework: ["web-axum", "web-rocket", "web-tide", "web-tower"]
      - check-standalone:
          requires:
            - clippy-workspace
          matrix:
            parameters:
              path:
                - examples/axum/hello-world
                - examples/axum/websocket
                - examples/rocket/authentication
                - examples/rocket/hello-world
                - examples/rocket/postgres
                - examples/rocket/url-shortener
                - examples/tide/hello-world
                - examples/tide/postgres
                - examples/tower/hello-world
  # build-test-and-push:
  #   jobs:
  #     - build-test-and-push
