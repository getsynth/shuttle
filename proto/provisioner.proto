syntax = "proto3";
package provisioner;

service Provisioner {
  rpc ProvisionDatabase(DatabaseRequest) returns (DatabaseResponse);
  rpc ProvisionArbitraryContainer(ContainerRequest) returns (ContainerResponse);
  rpc DeleteDatabase(DatabaseRequest) returns (DatabaseDeletionResponse);
  rpc HealthCheck(Ping) returns (Pong);
}

message DatabaseRequest {
  string project_name = 1;
  oneof db_type {
    Shared Shared = 10;
    AwsRds AwsRds = 11;
  };
}

message Shared {
  oneof engine {
    string postgres = 1;
    string mongodb = 50;
  }
}

message AwsRds {
  oneof engine {
    RdsConfig postgres = 1;
    RdsConfig mysql = 2;
    RdsConfig mariadb = 3;
  }
}

message RdsConfig {}

message DatabaseResponse {
  string username = 1;
  string password = 2;
  string database_name = 3;
  string engine = 4;
  string address_private = 5;
  string address_public = 6;
  string port = 7;
}

message DatabaseDeletionResponse {}

message ContainerRequest {
  string project_name = 1;
  // Type of container, used in the container name. ex "qdrant"
  string container_type = 2;
  // ex. "qdrant/qdrant:latest"
  string image = 3;
  // The internal port that the container should expose. ex. "6334/tcp"
  string port = 4;
  // list of "KEY=value" strings
  repeated string env = 5;
}

message ContainerResponse {
  // The port that the container exposes to the host.
  // Is a string for parity with the Docker respose.
  string host_port = 1;
}

message Ping {}
message Pong {}
